// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<FirstComponent /> functions button click  1`] = `ShallowWrapper {}`;

exports[`<FirstComponent /> functions test the only function 1`] = `undefined`;

exports[`<FirstComponent /> functions test the only function 2`] = `undefined`;

exports[`<FirstComponent /> functions test the only function 3`] = `undefined`;

exports[`Click send image renders correctly 1`] = `
<View
  style={
    Object {
      "backgroundColor": "white",
      "height": "100%",
    }
  }
>
  <ScrollView>
    <Toast
      visibilityTime={1500}
    />
    <View
      style={
        Object {
          "backgroundColor": "white",
          "flexDirection": "column",
          "height": "100%",
          "width": "100%",
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#3743ab",
            "borderBottomLeftRadius": 30,
            "borderBottomRightRadius": 30,
            "justifyContent": "center",
            "marginBottom": 12,
          }
        }
      >
        <Image
          source={
            Object {
              "uri": "https://i.stack.imgur.com/l60Hf.png",
            }
          }
          style={
            Object {
              "alignSelf": "center",
              "borderColor": "white",
              "borderRadius": 83,
              "borderWidth": 4,
              "height": 100,
              "marginBottom": 10,
              "marginTop": 30,
              "width": 100,
            }
          }
        />
        <View
          style={
            Object {
              "alignItems": "center",
              "marginBottom": 8,
            }
          }
        >
          <Text
            style={
              Object {
                "color": "white",
                "fontSize": 20,
                "fontWeight": "bold",
              }
            }
          >
            Not logged in!
          </Text>
          <Text
            style={
              Object {
                "color": "white",
                "fontWeight": "bold",
              }
            }
          />
        </View>
      </View>
      <View>
        <Themed.Button
          buttonStyle={
            Object {
              "backgroundColor": "#3743ab",
              "borderRadius": 30,
              "width": "48%",
            }
          }
          containerStyle={
            Object {
              "alignItems": "center",
            }
          }
          id="edit"
          onPress={[Function]}
          testID="estate"
          title="Edit profile"
        />
      </View>
      <View>
        <View>
          <View>
            <Formik
              initialValues={
                Object {
                  "Age": "",
                  "Bio": "",
                  "BloodGroup": "",
                  "Contact": "",
                  "Gender": "",
                  "MaritalStatus": "",
                  "Weight": "",
                }
              }
              onSubmit={[Function]}
              testID="log"
              validationSchema={
                ObjectSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_excludedEdges": Array [],
                  "_nodes": Array [
                    "BloodGroup",
                    "MaritalStatus",
                    "Gender",
                    "Weight",
                    "Age",
                    "Contact",
                    "Bio",
                  ],
                  "_sortErrors": [Function],
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [],
                  "deps": Array [],
                  "exclusiveTests": Object {},
                  "fields": Object {
                    "Age": StringSchema {
                      "_blacklist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_blacklistError": undefined,
                      "_typeError": [Function],
                      "_whitelist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_whitelistError": undefined,
                      "conditions": Array [],
                      "deps": Array [],
                      "exclusiveTests": Object {
                        "min": true,
                      },
                      "spec": Object {
                        "abortEarly": true,
                        "nullable": false,
                        "presence": "optional",
                        "recursive": true,
                        "strict": false,
                        "strip": false,
                      },
                      "tests": Array [
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                      ],
                      "type": "string",
                    },
                    "Bio": StringSchema {
                      "_blacklist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_blacklistError": undefined,
                      "_mutate": undefined,
                      "_typeError": [Function],
                      "_whitelist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_whitelistError": undefined,
                      "conditions": Array [],
                      "deps": Array [],
                      "exclusiveTests": Object {
                        "required": true,
                      },
                      "spec": Object {
                        "abortEarly": true,
                        "nullable": false,
                        "presence": "required",
                        "recursive": true,
                        "strict": false,
                        "strip": false,
                      },
                      "tests": Array [
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                      ],
                      "type": "string",
                    },
                    "BloodGroup": StringSchema {
                      "_blacklist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_blacklistError": undefined,
                      "_mutate": undefined,
                      "_typeError": [Function],
                      "_whitelist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_whitelistError": undefined,
                      "conditions": Array [],
                      "deps": Array [],
                      "exclusiveTests": Object {
                        "required": true,
                      },
                      "spec": Object {
                        "abortEarly": true,
                        "nullable": false,
                        "presence": "required",
                        "recursive": true,
                        "strict": false,
                        "strip": false,
                      },
                      "tests": Array [
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                      ],
                      "type": "string",
                    },
                    "Contact": StringSchema {
                      "_blacklist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_blacklistError": undefined,
                      "_mutate": undefined,
                      "_typeError": [Function],
                      "_whitelist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_whitelistError": undefined,
                      "conditions": Array [],
                      "deps": Array [],
                      "exclusiveTests": Object {
                        "max": true,
                        "min": true,
                        "required": true,
                      },
                      "spec": Object {
                        "abortEarly": true,
                        "nullable": false,
                        "presence": "required",
                        "recursive": true,
                        "strict": false,
                        "strip": false,
                      },
                      "tests": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                      ],
                      "type": "string",
                    },
                    "Gender": StringSchema {
                      "_blacklist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_blacklistError": undefined,
                      "_mutate": undefined,
                      "_typeError": [Function],
                      "_whitelist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_whitelistError": undefined,
                      "conditions": Array [],
                      "deps": Array [],
                      "exclusiveTests": Object {
                        "min": true,
                        "required": true,
                      },
                      "spec": Object {
                        "abortEarly": true,
                        "nullable": false,
                        "presence": "required",
                        "recursive": true,
                        "strict": false,
                        "strip": false,
                      },
                      "tests": Array [
                        [Function],
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                      ],
                      "type": "string",
                    },
                    "MaritalStatus": StringSchema {
                      "_blacklist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_blacklistError": undefined,
                      "_mutate": undefined,
                      "_typeError": [Function],
                      "_whitelist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_whitelistError": undefined,
                      "conditions": Array [],
                      "deps": Array [],
                      "exclusiveTests": Object {
                        "min": true,
                        "required": true,
                      },
                      "spec": Object {
                        "abortEarly": true,
                        "nullable": false,
                        "presence": "required",
                        "recursive": true,
                        "strict": false,
                        "strip": false,
                      },
                      "tests": Array [
                        [Function],
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                      ],
                      "type": "string",
                    },
                    "Weight": StringSchema {
                      "_blacklist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_blacklistError": undefined,
                      "_typeError": [Function],
                      "_whitelist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_whitelistError": undefined,
                      "conditions": Array [],
                      "deps": Array [],
                      "exclusiveTests": Object {
                        "min": true,
                      },
                      "spec": Object {
                        "abortEarly": true,
                        "nullable": false,
                        "presence": "optional",
                        "recursive": true,
                        "strict": false,
                        "strip": false,
                      },
                      "tests": Array [
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                      ],
                      "type": "string",
                    },
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [],
                  "transforms": Array [
                    [Function],
                  ],
                  "type": "object",
                }
              }
            >
              <Component />
            </Formik>
          </View>
        </View>
      </View>
    </View>
  </ScrollView>
</View>
`;
